'''
    2. Consider the ciphertext generated by Affine Cipher over Z26.
    As a hint, you are told that the most frequent letter in the plaintext is “A”.
    Find the plaintext and the encryption keys. Show your work.
'''
from hw01_helper import *

cipherText = "H fzbbvffsza xhu jf ruv tmr bhu ahn h sjix srzuyhcjru tjcm cmv eijbdf rcmvif mhwv cmirtu hc mjx."

# Since we are given the most frequent letter "a" we can find what "a" corresponds to in the ciphertext
freq = {}
for ch in cipherText.lower():
    if ch in lowercase:
        if ch not in freq:
            freq[ch] = 0
        freq[ch] += 1
print(freq)
# We can see that the most frequent letter in the cipher text is "h"
# We have the following plaintext-ciphertext pair ("a", "h") -> (0,7)
# 7 = 0x(alpha) + beta (mod 26) => we know beta is 7
x = 0
y = 7
key = key()
key.beta = 7
# The gcd of alpha and 26 must be one in this cipher
possibleAlpha = [x for x in (range(26)) if egcd(x, 26)[0] == 1]

# Now we I will use brute force to find alpha
plainTexts = [] # plaintext with key as a pair
for a in possibleAlpha:
    key.alpha = a
    key.gamma = modinv(a, 26)
    # x = gamma . y + theta (mod 26)
    key.theta = ( x - key.gamma * y) % 26
    plainTexts.append((Affine_Dec(cipherText, key), (key.alpha, key.beta, key.gamma, key.theta)))

for _text, _key in plainTexts:
    print(_text, _key)

# From the text we can see that the only one that makes sense is the following
# A successful man is one who can lay a firm foundation with the bricks others have thrown at him.
# with the key as (23, 7, 17, 11) = (alpha, beta, gamma, theta)


